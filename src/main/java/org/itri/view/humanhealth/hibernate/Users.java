package org.itri.view.humanhealth.hibernate;

import javax.persistence.GeneratedValue;import javax.persistence.SequenceGenerator;import javax.persistence.GenerationType;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Users generated by hbm2java
 */
@SuppressWarnings("serial")@Entity
@Table(name = "users")
public class Users implements java.io.Serializable {

	private long usersId;
	private String username;
	private String password;
	private Date timeCreated;
	private Date lastUpdated;
	private Date lastLogin;
	private boolean isDeleted;
	private Set<PatientInfo> patientInfos = new HashSet<PatientInfo>(0);
	private Set<Room> rooms = new HashSet<Room>(0);
	private Set<PatientThreshold> patientThresholds = new HashSet<PatientThreshold>(0);

	public Users() {
	}

	public Users(long usersId, String username, String password, Date timeCreated, Date lastUpdated, Date lastLogin,
			boolean isDeleted) {
		this.usersId = usersId;
		this.username = username;
		this.password = password;
		this.timeCreated = timeCreated;
		this.lastUpdated = lastUpdated;
		this.lastLogin = lastLogin;
		this.isDeleted = isDeleted;
	}

	public Users(long usersId, String username, String password, Date timeCreated, Date lastUpdated, Date lastLogin,
			boolean isDeleted, Set<PatientInfo> patientInfos, Set<Room> rooms,
			Set<PatientThreshold> patientThresholds) {
		this.usersId = usersId;
		this.username = username;
		this.password = password;
		this.timeCreated = timeCreated;
		this.lastUpdated = lastUpdated;
		this.lastLogin = lastLogin;
		this.isDeleted = isDeleted;
		this.patientInfos = patientInfos;
		this.rooms = rooms;
		this.patientThresholds = patientThresholds;
	}

	@SequenceGenerator(name="users_seq", sequenceName="users_users_id_seq", allocationSize=1)	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="users_seq")	@Id

	@Column(name = "users_id", unique = true, nullable = false)
	public long getUsersId() {
		return this.usersId;
	}

	public void setUsersId(long usersId) {
		this.usersId = usersId;
	}

	@Column(name = "username", nullable = false, length = 128)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false, length = 512)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "time_created", nullable = false, length = 29)
	public Date getTimeCreated() {
		return this.timeCreated;
	}

	public void setTimeCreated(Date timeCreated) {
		this.timeCreated = timeCreated;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_updated", nullable = false, length = 29)
	public Date getLastUpdated() {
		return this.lastUpdated;
	}

	public void setLastUpdated(Date lastUpdated) {
		this.lastUpdated = lastUpdated;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_login", nullable = false, length = 29)
	public Date getLastLogin() {
		return this.lastLogin;
	}

	public void setLastLogin(Date lastLogin) {
		this.lastLogin = lastLogin;
	}

	@Column(name = "is_deleted", nullable = false)
	public boolean isIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<PatientInfo> getPatientInfos() {
		return this.patientInfos;
	}

	public void setPatientInfos(Set<PatientInfo> patientInfos) {
		this.patientInfos = patientInfos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Room> getRooms() {
		return this.rooms;
	}

	public void setRooms(Set<Room> rooms) {
		this.rooms = rooms;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<PatientThreshold> getPatientThresholds() {
		return this.patientThresholds;
	}

	public void setPatientThresholds(Set<PatientThreshold> patientThresholds) {
		this.patientThresholds = patientThresholds;
	}

}
