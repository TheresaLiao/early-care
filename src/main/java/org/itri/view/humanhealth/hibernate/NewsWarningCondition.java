package org.itri.view.humanhealth.hibernate;

import javax.persistence.GeneratedValue;
import javax.persistence.SequenceGenerator;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * NewsWarningCondition generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "news_warning_condition")
public class NewsWarningCondition implements java.io.Serializable {

	private long newsWarningConditionId;
	private NewsMathOperator newsMathOperator;
	private Patient patient;
	private int newsWarningThreshold;
	private int timeBeforeWarning;
	private int countBeforeWarning;
	private int currentCount;
	private boolean isDeleted;

	public NewsWarningCondition() {
	}

	public NewsWarningCondition(NewsMathOperator newsMathOperator, Patient patient, int newsWarningThreshold,
			int timeBeforeWarning, int countBeforeWarning, int currentCount, boolean isDeleted) {
		this.newsMathOperator = newsMathOperator;
		this.patient = patient;
		this.newsWarningThreshold = newsWarningThreshold;
		this.timeBeforeWarning = timeBeforeWarning;
		this.countBeforeWarning = countBeforeWarning;
		this.currentCount = currentCount;
		this.isDeleted = isDeleted;
	}

	public NewsWarningCondition(long newsWarningConditionId, NewsMathOperator newsMathOperator, Patient patient,
			int newsWarningThreshold, int timeBeforeWarning, int countBeforeWarning, boolean isDeleted) {
		this.newsWarningConditionId = newsWarningConditionId;
		this.newsMathOperator = newsMathOperator;
		this.patient = patient;
		this.newsWarningThreshold = newsWarningThreshold;
		this.timeBeforeWarning = timeBeforeWarning;
		this.countBeforeWarning = countBeforeWarning;
		this.isDeleted = isDeleted;
	}

	@SequenceGenerator(name = "news_warning_condition_seq", sequenceName = "news_warning_condition_news_warning_condition_id_seq")
	@GeneratedValue(generator = "news_warning_condition_seq")
	@Id

	@Column(name = "news_warning_condition_id", unique = true, nullable = false)
	public long getNewsWarningConditionId() {
		return this.newsWarningConditionId;
	}

	public void setNewsWarningConditionId(long newsWarningConditionId) {
		this.newsWarningConditionId = newsWarningConditionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "news_math_operator_id", nullable = false)
	public NewsMathOperator getNewsMathOperator() {
		return this.newsMathOperator;
	}

	public void setNewsMathOperator(NewsMathOperator newsMathOperator) {
		this.newsMathOperator = newsMathOperator;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "patient_id", nullable = false)
	public Patient getPatient() {
		return this.patient;
	}

	public void setPatient(Patient patient) {
		this.patient = patient;
	}

	@Column(name = "news_warning_threshold", nullable = false)
	public int getNewsWarningThreshold() {
		return this.newsWarningThreshold;
	}

	public void setNewsWarningThreshold(int newsWarningThreshold) {
		this.newsWarningThreshold = newsWarningThreshold;
	}

	@Column(name = "time_before_warning", nullable = false)
	public int getTimeBeforeWarning() {
		return this.timeBeforeWarning;
	}

	public void setTimeBeforeWarning(int timeBeforeWarning) {
		this.timeBeforeWarning = timeBeforeWarning;
	}

	@Column(name = "count_before_warning", nullable = false)
	public int getCountBeforeWarning() {
		return this.countBeforeWarning;
	}

	public void setCountBeforeWarning(int countBeforeWarning) {
		this.countBeforeWarning = countBeforeWarning;
	}

	@Column(name = "current_count", nullable = false)
	public int getCurrentCount() {
		return this.currentCount;
	}

	public void setCurrentCount(int currentCount) {
		this.currentCount = currentCount;
	}

	@Column(name = "is_deleted", nullable = false)
	public boolean isIsDeleted() {
		return this.isDeleted;
	}

	public void setIsDeleted(boolean isDeleted) {
		this.isDeleted = isDeleted;
	}

}
